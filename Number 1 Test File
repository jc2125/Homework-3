#include <iostream>

using namespace std;
void treeArray(int [],int,int);
void DaryHeap(int[],int,int);
void Insert(int,int,int[],int);
void swim(int[],int,int);
void sink(int[],int,int);
void delMax(int[],int,int);
void daryHeapSort(int[],int,int);
void doubleArray(int[],int,int);
int main()
{
    int length = 10;
    int initialArray[length] = {18,1,110,98,5000,7,88,700,33,59};
    cout << "Original Array = ";
    for (int i = 0; i < length; i++)
    {
        cout << initialArray[i] << " ";
    }
    int d; // d is input
    cout << "\nHow Many Children Will Each Node Have?: ";
    cin >> d;
    treeArray(initialArray,length,d);
    cout << "\n\nGoing to Sort Tree With " << d << " children per parent\n";
    DaryHeap (initialArray,length,d);
    cout << "\n\nDaryHeap Array =\n";
          for (int q = 0; q < length; q++)
            {
                cout << initialArray[q] << " ";
            }
    int k;
    cout << "\n\nWhat Number Would You Like To Insert Into The Tree? ";
    cin >> k;
    Insert(k,length,initialArray,d);
    swim (initialArray,length,d);
    delMax(initialArray,length,d);
    sink(initialArray,length,d);
    daryHeapSort(initialArray,length,d);
}
void treeArray(int arr[],int sizeOfArray, int d){
    int index = 2;
    int z = 2;
    int k = 2;
    int x = 0;
    int heapArray[sizeOfArray] = {0};
    heapArray[0] = arr[0];
    heapArray[1] = arr[1];
    for (x = 0; x < ((sizeOfArray/d)-1); x++)
    {
        int t = index;
        int p = 1;
        for (index = index;index <= t + d - 1;index++)
        {
            heapArray[index] = arr[((d* (z-1)) + p)];
            p++;
        }
        heapArray[index] = arr[k];
        index++;
        k++;
        z++;
    }
     if (d == 4 )
    {
        heapArray[7] = arr[9];
        heapArray[8] = arr[3];
        heapArray[9] = arr[4];
    }
    if (d == 5)
    {
        swap(heapArray[6],heapArray[7]);
        heapArray[7] = arr[3];
        heapArray[8] = arr[4];
        heapArray[9] = arr[5];
    }
    cout << "\nheapArray =\n";
    for (int w = 0; w < sizeOfArray; w++)
    {
        arr[w] = heapArray[w];
        cout << arr[w] << " ";
    }
    int Max = 0;
    for (int i = 0; i < sizeOfArray; i++)
    {
        if (arr[Max] < arr[i])
        {
            Max = i;
        }
    }
    swap (arr[Max], arr[0]);
    cout << "\nHeapArray w/ Max valued index at root =\n";
    for (int g = 0; g < sizeOfArray; g++)
    {
        cout << arr[g] << " ";
    }
}
void DaryHeap(int arr[],int sizeOfArray,int d){
    int i = 1;
    if (d == 3)
    {
        for (int j = 0; j < ((sizeOfArray/d)-1) ; j++)
        {
            if ((arr[i+1] > arr[i+2])&&(arr[i+1] > arr[i+3]))
            {
                if (arr[i+1] > arr[i])
                {
                    swap (arr[i], arr[i+1]);
                }
            }
            else if ((arr[i+2] > arr[i+1])&&(arr[i+2] > arr[i+3]))
            {
                  if (arr[i+2] > arr[i])
                {
                    swap (arr[i], arr[i+1]);
                }
            }
            else if (arr[i+3] > arr[i+1]&&(arr[i+3] > arr[i+2]))
            {
                  if (arr[i+3] > arr[i])
                {
                    swap (arr[i], arr[i+3]);
                }
            }
            i = i + (d+1);
        }
    }
    else if (d == 4)
    {
        for (int t = 0; t < ((sizeOfArray/d)-1) ; t++)
        {
            if ((arr[i+1] > arr[i+2])&&(arr[i+1] > arr[i+3])&&(arr[i+1] > arr[i+4]))
            {
                   if (arr[i+1] > arr[i])
                {
                    swap (arr[i], arr[i+1]);
                }
            }
            else if ((arr[i+2] > arr[i+1])&&(arr[i+2] > arr[i+3])&&(arr[i+2] > arr[i+4]))
            {
                  if (arr[i+2] > arr[i])
                {
                    swap (arr[i], arr[i+2]);
                }
            }
            else if (arr[i+3] > arr[i+1]&&(arr[i+3] > arr[i+2])&&(arr[i+3] > arr[i+4]))
            {
                 if (arr[i+3] > arr[i])
                {
                    swap (arr[i], arr[i+3]);
                }
            }
            else if (arr[i+4] > arr[i+1]&&(arr[i+4] > arr[i+2])&&(arr[i+4] > arr[i+3]))
            {
                 if (arr[i+4] > arr[i])
                {
                    swap (arr[i], arr[i+4]);
                }
            }
            i = i + (d+1);
        }

    }
    else if (d == 5)
    {
        for (int w = 0; ((sizeOfArray/d)-1) ; w++)
        {
            if ((arr[i+1] > arr[i+2])&&(arr[i+1] > arr[i+3])&&(arr[i+1] > arr[i+4])&&(arr[i+1] > arr[i+5]))
            {
                if (arr[i+1] > arr[i])
                {
                    swap (arr[i], arr[i+1]);
                }
            }
            else if ((arr[i+2] > arr[i+1])&&(arr[i+2] > arr[i+3])&&(arr[i+2] > arr[i+4])&&(arr[i+2] > arr[i+5]))
            {
                if (arr[i+2] > arr[i])
                {
                    swap (arr[i], arr[i+2]);
                }
            }
            else if (arr[i+3] > arr[i+1]&&(arr[i+3] > arr[i+2])&&(arr[i+3] > arr[i+4])&&(arr[i+3] > arr[i+5]))
            {
                if (arr[i+3] > arr[i])
                {
                    swap (arr[i], arr[i+3]);
                }
            }
            else if (arr[i+4] > arr[i+1]&&(arr[i+4] > arr[i+2])&&(arr[i+4] > arr[i+3])&&(arr[i+4] > arr[i+5]))
            {
                if (arr[i+4] > arr[i])
                {
                    swap (arr[i], arr[i+4]);
                }
            }
            else if (arr[i+5] > arr[i+1]&&(arr[i+5] > arr[i+2])&&(arr[i+5] > arr[i+3])&&(arr[i+5] > arr[i+4]))
            {
                if (arr[i+5] > arr[i])
                {
                    swap (arr[i], arr[i+5]);
                }
            }
            i = i + (d+1);
        }
    }
}
void Insert(int k,int arrayLength, int arr[],int d){
arrayLength++;
arr[arrayLength-1] = k;

cout << "\n\nArray After Insertion = ";
for (int i = 0; i < arrayLength;i++)
{
    cout << arr[i] << " ";
}
}
void swim(int arr[],int arrayLength,int d){
arrayLength++;
if (arr[arrayLength-2] < arr[arrayLength-1])
{
    swap(arr[arrayLength-2],arr[arrayLength-1]);
    if (arr[0] < arr[arrayLength-2])
    {
        swap(arr[0],arr[arrayLength-2]);
    }
}
cout << "\n\nHeap Array After Swim:\n";
for (int i = 0; i < arrayLength;i++)
{
    cout << arr[i] << " ";
}
}

void delMax(int arr[],int arrayLength,int d){
arrayLength++;
cout << "\n\nThe Largest Value in The Heap(which is going to be deleted) =\n" << arr[0] << endl;
swap(arr[0],arr[arrayLength-1]);
arrayLength--;

cout << "\n\nArray After Deletion: ";
for (int i = 0; i < arrayLength;i++)
{
    cout << arr[i] << " ";
}
}

void sink(int arr[],int arrayLength,int d){
int Max = 0;
    for (int w = 0; w < arrayLength; w++)
    {
        if (arr[Max] < arr[w])
        {
            Max = w;
        }
    }
    swap (arr[Max], arr[0]);
DaryHeap(arr,arrayLength,d);
cout << "\n\nNew Heap Array After Swim:\n";
for (int i = 0; i < arrayLength;i++)
{
    cout << arr[i] << " ";
}
}
void daryHeapSort(int arr[],int arrayLength,int d){
int copyArray[arrayLength] = {0};
signed int t = arrayLength - 1;
while (t != -1)
{
swap(arr[0],arr[t]);
copyArray[t] = arr[t];
int Max = 0;
    for (int w = 0; w < t; w++)
    {
        if (arr[Max] < arr[w])
        {
            Max = w;
        }
    }
    swap (arr[Max], arr[0]);
t--;
}
cout << "\n\nSorted Array = ";
for (int j = 0; j < arrayLength;j++)
{
    cout << copyArray[j] << " ";
}
cout << endl;
}
void doubleArray(int arr[],int arrayLength,int d){
int tempArray[2*arrayLength];
for (int i =0; i < arrayLength;i++)
    {
        tempArray[i] = arr[i];
    }
arrayLength = arrayLength * 2;
}
